/**
 * 记忆化搜索是一种“从顶至底”的方法：从原问题（根节点）开始，递归的将较大子问题分解为较小子问题
 * 直至解已知的最小子问题（叶节点），之后，通过回溯将子问题的解逐层收集，构建出原问题的解
 * 动态规划是一种“从底至顶”的方法：从最小问题的解开始，迭代地构建更大子问题的解，直至得到原问题的解
 * 由于动态规划不包含回溯过程，因此只需要使用循环迭代实现，无需使用递归。
 * 我们可以初始化一个数组dp来存储子问题的解，它起到了记忆化搜索中数组mem相同的记录作用
 * 
 */
/** 爬楼梯：动态规划 */
function climbingStairsDP(n) {
    if(n === 1 || n === 2) return n;
    // 初始化dp表，用于存储子问题的解
    const dp = new Array(n+1).fill(-1);
    // 初始状态，预设最小子问题的解
    dp[1] = 1;
    dp[2] = 2;
    for(let i = 3; i <=n; i++) {
        dp[i] = dp[i-1] + dp[i-2];
    }
    return dp[n];
}

// 由于dp[i]只与dp[i-1]和dp[i-2]有关，因此我们无须使用一个数组dp来存储所有子问题的解
// 而只需要两个变量即可，此操作可将空间复杂度从O(n)降至O(1)
function climbingStairsDPComp(n) {
    if(n === 1 || n === 2) return n;
    // 初始状态，预设最小子问题的解
    let a = 1;
    let b = 2;
    for(let i = 3; i <=n; i++) {
        let temp = b;
        b = b + a;
        a = temp;
    }
    return b;
}